let quill;
document.addEventListener('DOMContentLoaded', () => {
  // ==== Supabase config ====
  const SUPABASE_URL = 'https://iajtzxdhjkcycgvbetax.supabase.co';
  const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlhanR6eGRoamtjeWNndmJldGF4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk1NzY0NjUsImV4cCI6MjA2NTE1MjQ2NX0.DShzKhj4VoLsCFVSbl07DgB7GdhiqVGAg6hgJl8pdXQ';
  const supabaseClient = window.supabase.createClient(SUPABASE_URL, SUPABASE_KEY);

  const ADMIN_PASSWORD = '12344';

  let isAdmin = false;
  let currentEmotion = '';
  let allData = [];
  let currentLanguage = 'en';

  // ==== –ü–µ—Ä–µ–≤–æ–¥—ã ====
  const translations = {
    en: {
      dbTitle: "Multilingual database ‚ÄúEmotions in metaphorical representation‚Äù",
      pageTitle: "World of Emotions",
      mainTitle: "World of Emotions",
      welcomeText: "Emotions are the bright colors of our lives, accompanying us from childhood and making every day unique. Joy and sadness, fear and surprise, anger and disgust ‚Äî all are important for our inner world...",
      welcomeQuote: "‚ÄúEmotions are not a weakness, but a force that drives our lives.‚Äù <br>‚Äî Carl Gustav Jung",
      adminLogin: "üîë Admin login",
      adminLoginTitle: "Admin Login",
      adminPassword: "Admin password",
      adminLoginBtn: "Login",
      adminWrongPass: "Wrong password",
      joy: "Joy",
      sadness: "Sadness",
      fear: "Fear",
      anger: "Anger",
      surprise: "Surprise",
      disgust: "Disgust",
      emotionName: "Emotion Name",
      metaphoricalModel: "Metaphorical Model",
      submodel: "Submodel",
      semanticRole: "Semantic Role",
      example: "Example",
      verbClass: "Thematic Verb Class",
      adjClass: "Thematic Adjective Class",
      addData: "Add Data",
      save: "Save",
      delete: "Delete",
      publications: "Publications",
      instructions: "Instructions",
      developer: "Developer",
      about: "About us",
      aboutText: "This research was carried out with the support of the Science Committee of the Ministry of Science and Higher Education of the Republic of Kazakhstan (Grant N¬∫ AP19177908 Comparison of metaphorical models in Kazakh, Russian, English, and German (based on the representation of emotional states) within the priority area Research in the field of social and human sciences."
},
      
    ru: {
      dbTitle: "–ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ¬´–≠–º–æ—Ü–∏–∏ –≤ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏¬ª",
      pageTitle: "–ú–∏—Ä —ç–º–æ—Ü–∏–π",
      mainTitle: "–ú–∏—Ä —ç–º–æ—Ü–∏–π",
      welcomeText: "–≠–º–æ—Ü–∏–∏ ‚Äî —ç—Ç–æ —è—Ä–∫–∏–µ –∫—Ä–∞—Å–∫–∏ –Ω–∞—à–µ–π –∂–∏–∑–Ω–∏, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ –Ω–∞—Å —Å –¥–µ—Ç—Å—Ç–≤–∞ –∏ –¥–µ–ª–∞—é—â–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º. –†–∞–¥–æ—Å—Ç—å –∏ –≥—Ä—É—Å—Ç—å, —Å—Ç—Ä–∞—Ö –∏ —É–¥–∏–≤–ª–µ–Ω–∏–µ, –≥–Ω–µ–≤ –∏ –æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ ‚Äî –≤—Å–µ –æ–Ω–∏ –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—à–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞...",
      welcomeQuote: "¬´–≠–º–æ—Ü–∏–∏ ‚Äî –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å, –∞ —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–≤–∏–∂–µ—Ç –Ω–∞—à–µ–π –∂–∏–∑–Ω—å—é.¬ª <br>‚Äî –ö–∞—Ä–ª –ì—É—Å—Ç–∞–≤ –Æ–Ω–≥",
      adminLogin: "üîë –í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞",
      adminLoginTitle: "–í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
      adminPassword: "–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
      adminLoginBtn: "–í–æ–π—Ç–∏",
      adminWrongPass: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å",
      joy: "–†–∞–¥–æ—Å—Ç—å",
      sadness: "–ì—Ä—É—Å—Ç—å",
      fear: "–°—Ç—Ä–∞—Ö",
      anger: "–ì–Ω–µ–≤",
      surprise: "–£–¥–∏–≤–ª–µ–Ω–∏–µ",
      disgust: "–û—Ç–≤—Ä–∞—â–µ–Ω–∏–µ",
      emotionName: "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏",
      metaphoricalModel: "–ú–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å",
      submodel: "–°—É–±–º–æ–¥–µ–ª—å",
      semanticRole: "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ–ª—å",
      example: "–ü—Ä–∏–º–µ—Ä",
      verbClass: "–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å –≥–ª–∞–≥–æ–ª–æ–≤",
      adjClass: "–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö",
      addData: "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
      save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
      delete: "–£–¥–∞–ª–∏—Ç—å",
      publications: "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏",
      instructions: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
      developer: "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
      about: "–û –Ω–∞—Å",
      aboutText: "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ö–æ–º–∏—Ç–µ—Ç–∞ –Ω–∞—É–∫–∏ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –Ω–∞—É–∫–∏ –∏ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (–ì—Ä–∞–Ω—Ç N¬∫ AP19177908 ¬´–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫–∞–∑–∞—Ö—Å–∫–æ–º, —Ä—É—Å—Å–∫–æ–º, –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–∞—Ö (–Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π¬ª) –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É ¬´–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞—É–∫¬ª."
    },
    de: {
      dbTitle: "Mehrsprachige Datenbank ‚ÄûEmotionen in metaphorischer Darstellung‚Äú",
      pageTitle: "Welt der Emotionen",
      mainTitle: "Welt der Emotionen",
      welcomeText: "Emotionen sind die leuchtenden Farben unseres Lebens, begleiten uns seit der Kindheit und machen jeden Tag einzigartig. Freude und Trauer, Angst und √úberraschung, Wut und Ekel ‚Äì alle sind wichtig f√ºr unsere innere Welt...",
      welcomeQuote: "‚ÄûEmotionen sind keine Schw√§che, sondern eine Kraft, die unser Leben antreibt.‚Äú <br>‚Äî Carl Gustav Jung",
      adminLogin: "üîë Admin-Login",
      adminLoginTitle: "Admin Login",
      adminPassword: "Admin-Passwort",
      adminLoginBtn: "Anmelden",
      adminWrongPass: "Falsches Passwort",
      joy: "Freude",
      sadness: "Traurigkeit",
      fear: "Angst",
      anger: "Wut",
      surprise: "√úberraschung",
      disgust: "Ekel",
      emotionName: "Name der Emotion",
      metaphoricalModel: "Metaphorisches Modell",
      submodel: "Submodell",
      semanticRole: "Semantische Rolle",
      example: "Beispiel",
      verbClass: "Thematische Verbklasse",
      adjClass: "Thematische Adjektivklasse",
      addData: "Daten hinzuf√ºgen",
      save: "Speichern",
      delete: "L√∂schen",
      publications: "Publikationen",
      instructions: "Anleitungen",
      developer: "Entwickler",
      about: "√úber uns",
      aboutText: "Diese Forschung wurde mit Unterst√ºtzung des Wissenschaftskomitees des Ministeriums f√ºr Wissenschaft und Hochschulbildung der Republik Kasachstan durchgef√ºhrt (Grant-Nr. AP19177908 Vergleich metaphorischer Modelle im Kasachischen, Russischen, Englischen und Deutschen (am Beispiel der Repr√§sentation emotionaler Zust√§nde)) im Rahmen der Priorit√§t Forschung im Bereich der Sozial- und Geisteswissenschaften."
    },
    kk: {
      dbTitle: "–ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ¬´–≠–º–æ—Ü–∏–∏ –≤ –º–µ—Ç–∞—Ñ–æ—Ä–∏—è–ª—ã“õ –∫”©—Ä—ñ–Ω—ñ—Å—Ç–µ¬ª",
      pageTitle: "–≠–º–æ—Ü–∏—è–ª–∞—Ä ”ô–ª–µ–º—ñ",
      mainTitle: "–≠–º–æ—Ü–∏—è–ª–∞—Ä ”ô–ª–µ–º—ñ",
      welcomeText: "–≠–º–æ—Ü–∏—è–ª–∞—Ä ‚Äî –±—ñ–∑–¥—ñ“£ ”©–º—ñ—Ä—ñ–º—ñ–∑–¥—ñ“£ –∂–∞—Ä“õ—ã–Ω —Ç“Ø—Å—Ç–µ—Ä—ñ, –æ–ª–∞—Ä –±—ñ–∑–¥—ñ –±–∞–ª–∞–ª—ã“õ —à–∞“õ—Ç–∞–Ω –±–∞—Å—Ç–∞–ø –µ—Ä—Ç—ñ–ø, ”ô—Ä –∫“Ø–Ω–¥—ñ –µ—Ä–µ–∫—à–µ –µ—Ç–µ–¥—ñ. “ö—É–∞–Ω—ã—à –ø–µ–Ω “õ–∞–π“ì—ã, “õ–æ—Ä“õ—ã–Ω—ã—à –ø–µ–Ω —Ç–∞“£–¥–∞–Ω—ã—Å, –∞—à—É –º–µ–Ω –∂–∏—ñ—Ä–∫–µ–Ω—É ‚Äî –±”ô—Ä—ñ –¥–µ —ñ—à–∫—ñ ”ô–ª–µ–º—ñ–º—ñ–∑ “Ø—à—ñ–Ω –º–∞“£—ã–∑–¥—ã...",
      welcomeQuote: "¬´–≠–º–æ—Ü–∏—è–ª–∞—Ä ‚Äî ”ô–ª—Å—ñ–∑–¥—ñ–∫ –µ–º–µ—Å, ”©–º—ñ—Ä—ñ–º—ñ–∑–¥—ñ –∞–ª“ì–∞ –∂–µ—Ç–µ–ª–µ–π—Ç—ñ–Ω –∫“Ø—à.¬ª <br>‚Äî –ö–∞—Ä–ª –ì—É—Å—Ç–∞–≤ –Æ–Ω–≥",
      adminLogin: "üîë ”ò–∫—ñ–º—à—ñ–≥–µ –∫—ñ—Ä—É",
      adminLoginTitle: "”ò–∫—ñ–º—à—ñ–≥–µ –∫—ñ—Ä—É",
      adminPassword: "”ò–∫—ñ–º—à—ñ “õ“±–ø–∏—è —Å”©–∑—ñ",
      adminLoginBtn: "–ö—ñ—Ä—É",
      adminWrongPass: "“ö–∞—Ç–µ “õ“±–ø–∏—è —Å”©–∑",
      joy: "“ö—É–∞–Ω—ã—à",
      sadness: "“ö–∞–π“ì—ã",
      fear: "“ö–æ—Ä“õ—ã–Ω—ã—à",
      anger: "–ê—à—É",
      surprise: "–¢–∞“£–¥–∞–Ω—ã—Å",
      disgust: "–ñ–∏—ñ—Ä–∫–µ–Ω—É",
      emotionName: "–≠–º–æ—Ü–∏—è –∞—Ç–∞—É—ã",
      metaphoricalModel: "–ú–µ—Ç–∞—Ñ–æ—Ä–∏–∫–∞–ª—ã“õ –º–æ–¥–µ–ª—å",
      submodel: "–°—É–±–º–æ–¥–µ–ª—å",
      semanticRole: "–°–µ–º–∞–Ω—Ç–∏–∫–∞–ª—ã“õ —Ä”©–ª",
      example: "–ú—ã—Å–∞–ª",
      verbClass: "–¢–∞“õ—ã—Ä—ã–ø—Ç—ã“õ –µ—Ç—ñ—Å—Ç—ñ–∫ –∫–ª–∞—Å—ã",
      adjClass: "–¢–∞“õ—ã—Ä—ã–ø—Ç—ã“õ —Å—ã–Ω –µ—Å—ñ–º –∫–ª–∞—Å—ã",
      addData: "–î–µ—Ä–µ–∫ “õ–æ—Å—É",
      save: "–°–∞“õ—Ç–∞—É",
      delete: "–ñ–æ—é",
      publications: "–ñ–∞—Ä–∏—è–ª–∞–Ω—ã–º–¥–∞—Ä",
      instructions: "–ù“±—Å“õ–∞—É–ª—ã“õ—Ç–∞—Ä",
      developer: "”ò–∑—ñ—Ä–ª–µ—É—à—ñ",
      about: "–ë—ñ–∑ —Ç—É—Ä–∞–ª—ã",
      aboutText: "–ë“±–ª –∑–µ—Ä—Ç—Ç–µ—É “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∞—Å—ã “í—ã–ª—ã–º –∂”ô–Ω–µ –∂–æ“ì–∞—Ä—ã –±—ñ–ª—ñ–º –º–∏–Ω–∏—Å—Ç—Ä–ª—ñ–≥—ñ–Ω—ñ“£ “í—ã–ª—ã–º –∫–æ–º–∏—Ç–µ—Ç—ñ–Ω—ñ“£ “õ–æ–ª–¥–∞—É—ã–º–µ–Ω –∂“Ø–∑–µ–≥–µ –∞—Å—ã—Ä—ã–ª–¥—ã (–ì—Ä–∞–Ω—Ç ‚Ññ AP19177908 “ö–∞–∑–∞“õ, –æ—Ä—ã—Å, –∞“ì—ã–ª—à—ã–Ω –∂”ô–Ω–µ –Ω–µ–º—ñ—Å —Ç—ñ–ª–¥–µ—Ä—ñ–Ω–¥–µ–≥—ñ –º–µ—Ç–∞—Ñ–æ—Ä–∞–ª—ã“õ “Ø–ª–≥—ñ–ª–µ—Ä–¥—ñ —Å–∞–ª—ã—Å—Ç—ã—Ä—É (—ç–º–æ—Ü–∏—è–ª—ã“õ –∫“Ø–π–ª–µ—Ä–¥—ñ“£ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è—Å—ã –º—ã—Å–∞–ª—ã–Ω–¥–∞)) ¬´”ò–ª–µ—É–º–µ—Ç—Ç—ñ–∫ –∂”ô–Ω–µ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–ª—ã“õ “ì—ã–ª—ã–º–¥–∞—Ä —Å–∞–ª–∞—Å—ã–Ω–¥–∞“ì—ã –∑–µ—Ä—Ç—Ç–µ—É–ª–µ—Ä¬ª –±–∞—Å—ã–º–¥—ã“ì—ã –±–æ–π—ã–Ω—à–∞."
    }
  };

  quill = new Quill('#example-editor', {
    theme: 'snow',
    modules: {
      toolbar: [
        [{ 'font': [] }],
        [{ 'size': ['small', false, 'large', 'huge'] }],
        ['bold', 'italic', 'underline'],
        [{ 'color': [] }, { 'background': [] }],
        [{ 'align': [] }],
        ['clean']
      ]
    }
  });
// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
  const emotionSearchInput = document.getElementById('emotion-search');
  const emotionSearchBtn = document.getElementById('emotion-search-btn');

  function searchByEmotionName() {
    const query = emotionSearchInput.value.trim().toLowerCase();

    if (!query) {
      // –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      renderTable(allData);
      return;
    }

    const filtered = allData.filter(row => (row.name || '').toLowerCase().includes(query));
    renderTable(filtered);
  }

  if (emotionSearchBtn) {
    emotionSearchBtn.addEventListener('click', searchByEmotionName);
  }

  // --- –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ (PDF) ---
const showPublicationsBtn = document.getElementById('show-publications');
const pdfModal = document.getElementById('pdf-modal');
const closePdfModalBtn = document.getElementById('close-pdf-modal');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–Ω–∏ –µ—Å—Ç—å –Ω–µ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö)
if (showPublicationsBtn && pdfModal && closePdfModalBtn) {
  showPublicationsBtn.addEventListener('click', () => {
    pdfModal.classList.remove('hidden');
  });
  closePdfModalBtn.addEventListener('click', () => {
    pdfModal.classList.add('hidden');
  });
  pdfModal.addEventListener('click', (e) => {
    if (e.target === pdfModal) {
      pdfModal.classList.add('hidden');
    }
  });
}

  const aboutBtn = document.getElementById('about-btn');
const aboutModal = document.getElementById('about-modal');
const aboutClose = document.getElementById('about-close');
const aboutContent = document.getElementById('about-content');

function showAboutContent() {
  aboutContent.innerHTML = translations[currentLanguage].aboutText;
}

aboutBtn.addEventListener('click', () => {
  showAboutContent();
  aboutModal.classList.remove('hidden');
});

aboutClose.addEventListener('click', () => {
  aboutModal.classList.add('hidden');
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
aboutModal.addEventListener('click', (e) => {
  if (e.target === aboutModal) aboutModal.classList.add('hidden');
});

function updateLanguageUI() {
  // ...—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
  if (!aboutModal.classList.contains('hidden')) {
    showAboutContent();
  }
}


  // ==== UI Elements ====
  const modal = document.getElementById('modal');
  const modalTitle = document.getElementById('modal-title');
  const closeModalBtn = document.getElementById('close-modal');
  const tableBody = document.querySelector('#emotion-table tbody');
  const showFormBtn = document.getElementById('show-form');
  const addForm = document.getElementById('add-form');
  const langSwitcher = document.querySelector('.lang-switcher');
  const deleteHeader = document.getElementById('delete-header');
  const adminLoginBtn = document.getElementById('admin-login-btn');
  const adminModal = document.getElementById('admin-modal');
  const closeAdminModalBtn = document.getElementById('close-admin-modal');
  const adminLoginForm = document.getElementById('admin-login-form');
  const adminPasswordInput = document.getElementById('admin-password');
  const adminError = document.getElementById('admin-error');
 

  let sortKey = 'name';
  let sortDir = 'asc';

  function updateLanguageUI() {
    document.querySelectorAll('[data-i18n]').forEach(el => {
      const key = el.getAttribute('data-i18n');
      if (translations[currentLanguage][key]) {
        if (el.tagName.toLowerCase() === 'title') {
          document.title = translations[currentLanguage][key];
        } else {
          el.innerHTML = translations[currentLanguage][key];
        }
   
        const dbTitleEl = document.getElementById('db-title');
  if (dbTitleEl && translations[currentLanguage] && translations[currentLanguage].dbTitle) {
    dbTitleEl.textContent = translations[currentLanguage].dbTitle;
  });
    document.querySelectorAll('[data-i18n-placeholder]').forEach(el => {
      const key = el.getAttribute('data-i18n-placeholder');
      if (translations[currentLanguage][key]) {
        el.placeholder = translations[currentLanguage][key];
      }
    });
    showFormBtn.textContent = translations[currentLanguage].addData;
    addForm.querySelector('.submit-btn').textContent = translations[currentLanguage].save;
    addForm.querySelector('.submit-btn').textContent = translations[currentLanguage].edit;
    if (isAdmin) {
      deleteHeader.textContent = translations[currentLanguage].delete;
    }
  }

  function renderTable(data) {
    data = [...data].sort((a, b) => {
      let vA = a[sortKey] || '';
      let vB = b[sortKey] || '';
      if (vA < vB) return sortDir === 'asc' ? -1 : 1;
      if (vA > vB) return sortDir === 'asc' ? 1 : -1;
      return 0;
    });


    tableBody.innerHTML = '';
    data.forEach(row => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${row.name || ''}</td>
        <td>${row.metaphorical_model || ''}</td>
        <td>${row.submodel || ''}</td>
        <td>${row.semantic_role || ''}</td>
        <td></td>
        <td>${row.verb_class || ''}</td>
        <td>${row.adj_class || ''}</td>
        ${isAdmin ? `<td><button class="edit-btn" data-id="${row.id}">${translations[currentLanguage]?.edit || 'Edit'}</button>
        <button class="delete-btn" data-id="${row.id}">${translations[currentLanguage].delete}</button></td>` : ''}
      `;
      
      const exampleTd = tr.children[4];
    exampleTd.innerHTML = row.example || '';

    tableBody.appendChild(tr);
  });

    if (isAdmin) {
      document.querySelectorAll('.edit-btn').forEach(btn => {
    btn.onclick = function() {
      const id = this.dataset.id;
      const row = allData.find(r => String(r.id) === String(id));
      if (row) {
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        addForm.classList.remove('hidden');
        showFormBtn.classList.add('hidden');
        for (const key of ['name', 'metaphorical_model', 'submodel', 'semantic_role', 'verb_class', 'adj_class']) {
          addForm.elements[key].value = row[key] || '';
        }

        // **–í–æ—Ç —Å—é–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É Example –≤ Quill:**
        quill.root.innerHTML = row.example || '';

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ —Ñ–æ—Ä–º—ã
        addForm.dataset.editId = id;

        // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
        addForm.querySelector('.submit-btn').textContent = translations[currentLanguage]?.edit || 'Edit';
      }
    };
  });
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.onclick = async function() {
          const id = this.dataset.id;
          if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
            const { error } = await supabaseClient
              .from('emotions')
              .delete()
              .eq('id', id);
            if (!error) {
              allData = allData.filter(r => String(r.id) !== String(id));
              renderTable(allData);
            } else {
              alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
            }
          }
        };
      });
    }
  }

  document.querySelectorAll('.emotion-card').forEach(card => {
    card.addEventListener('click', async () => {
      currentEmotion = card.dataset.emotion;
      modalTitle.textContent = card.querySelector('[data-i18n]')?.textContent || card.textContent;
      modal.classList.remove('hidden');
      showFormBtn.classList.toggle('hidden', !isAdmin);
      addForm.classList.add('hidden');
      const { data } = await supabaseClient
        .from('emotions')
        .select('*')
        .eq('emotion', currentEmotion);
      allData = data || [];
      renderTable(allData);
      updateLanguageUI();
    });
  });

  closeModalBtn.onclick = () => modal.classList.add('hidden');
  showFormBtn.onclick = () => {
    addForm.classList.remove('hidden');
    showFormBtn.classList.add('hidden');
  };

 addForm.onsubmit = async (e) => {
  e.preventDefault();
  addForm.elements['example'].value = quill.root.innerHTML;
  const formData = new FormData(addForm);
  const newRow = {
    emotion: currentEmotion,
    name: formData.get('name'),
    metaphorical_model: formData.get('metaphorical_model'),
    submodel: formData.get('submodel'),
    semantic_role: formData.get('semantic_role'),
    example: formData.get('example'),
    verb_class: formData.get('verb_class'),
    adj_class: formData.get('adj_class'),
    language: currentLanguage
  };

  if (addForm.dataset.editId) {
    // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editId = addForm.dataset.editId;
    const { error } = await supabaseClient
      .from('emotions')
      .update(newRow)
      .eq('id', editId);
    if (!error) {
      const idx = allData.findIndex(r => String(r.id) === String(editId));
      if (idx !== -1) allData[idx] = { ...allData[idx], ...newRow };
      renderTable(allData);
      addForm.reset();
      addForm.classList.add('hidden');
      showFormBtn.classList.remove('hidden');
      delete addForm.dataset.editId;
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ' + error.message);
    }
  } else {
    // –û–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    const { data, error } = await supabaseClient
      .from('emotions')
      .insert([newRow])
      .select();
    if (!error && data && data.length > 0) {
      allData.push({ ...newRow, id: data[0].id });
      renderTable(allData);
      addForm.reset();
      addForm.classList.add('hidden');
      showFormBtn.classList.remove('hidden');
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ' + (error ? error.message : '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã'));
    }
  }
};


  langSwitcher.addEventListener('click', (e) => {
    if (e.target.tagName === 'BUTTON') {
      const lang = e.target.getAttribute('data-lang');
      if (lang && translations[lang]) {
        currentLanguage = lang;
        updateLanguageUI();
      }
    }
  });

  adminLoginBtn.onclick = () => {
    adminModal.classList.remove('hidden');
    adminError.style.display = 'none';
    adminPasswordInput.value = '';
  };
  closeAdminModalBtn.onclick = () => adminModal.classList.add('hidden');
  adminLoginForm.onsubmit = (e) => {
    e.preventDefault();
    if (adminPasswordInput.value === ADMIN_PASSWORD) {
      isAdmin = true;
      adminModal.classList.add('hidden');
      adminLoginBtn.textContent = translations[currentLanguage].adminLogin + ' (admin)';
      adminLoginBtn.disabled = true;
      showFormBtn.classList.remove('hidden');
      if (!modal.classList.contains('hidden')) {
        renderTable(allData);
      }
      deleteHeader.style.display = '';
    } else {
      adminError.style.display = 'block';
    }
  };
sortField.onchange = function() {
    sortKey = sortField.value;
    renderTable(allData);
  };
  sortAscBtn.onclick = function() {
    sortDir = 'asc';
    renderTable(allData);
  };
  sortDescBtn.onclick = function() {
    sortDir = 'desc';
    renderTable(allData);
  };
 

  updateLanguageUI();
});
